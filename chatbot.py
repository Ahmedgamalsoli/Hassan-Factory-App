# ======================
# Used imports
# ======================

import tkinter as tk
import os
import sys
import matplotlib

from tkinter import ttk
from PIL import Image, ImageTk

matplotlib.use('TkAgg')  # Set the backend before importing pyplot


# Determine the base directory
if getattr(sys, "frozen", False):
    # Running as an executable
    BASE_DIR = sys._MEIPASS
else:
    # Running as a script
    BASE_DIR = os.path.dirname(os.path.abspath(__file__))
class chatbot:
    def __init__(self, root, app):
        self.root = root
        self.app = app  # save reference to SalesSystemApp
    def open_chatbot(self):
        chatbot_win = tk.Toplevel(self.root)
        chatbot_win.title("ูุณุงุนุฏ ุงูุชุทุจูู")
        chatbot_win.title(self.app.t("Application Assistant"))
        chatbot_win.geometry("400x500")
        chatbot_win.resizable(False, False)
    
        # Set custom icon for the window (feather.ico)
        icon_path = os.path.join(BASE_DIR, "Static", "images", "chatbot_icon.ico")
        if os.path.exists(icon_path):
            chatbot_win.iconbitmap(icon_path)
    
        # Chatbot icon (draggable)
        icon_frame = tk.Frame(chatbot_win, width=60, height=60)
        icon_frame.place(x=10, y=10)
        icon_img_path = os.path.join(BASE_DIR, "Static", "images", "chatbot_icon.ico")
        if os.path.exists(icon_img_path):
            icon_img = Image.open(icon_img_path).resize((60, 60), Image.LANCZOS)
            icon_photo = ImageTk.PhotoImage(icon_img)
            icon_label = tk.Label(icon_frame, image=icon_photo)
            icon_label.image = icon_photo
            icon_label.pack()
        else:
            icon_label = tk.Label(icon_frame, text="๐ค", font=("Arial", 32))
            icon_label.pack()
    
        # Make icon draggable
        def start_drag(event):
            icon_frame._drag_start_x = event.x
            icon_frame._drag_start_y = event.y
    
        def do_drag(event):
            x = icon_frame.winfo_x() + event.x - icon_frame._drag_start_x
            y = icon_frame.winfo_y() + event.y - icon_frame._drag_start_y
            icon_frame.place(x=x, y=y)
    
        icon_label.bind("<Button-1>", start_drag)
        icon_label.bind("<B1-Motion>", do_drag)
    
        # Chat area
        chat_frame = tk.Frame(chatbot_win)
        chat_frame.place(x=80, y=10, width=310, height=420)
        chat_text = tk.Text(chat_frame, state="disabled", wrap="word", font=("Arial", 12))
        chat_text.pack(fill="both", expand=True)
    
        # Entry and send button (hidden, not used)
        entry_frame = tk.Frame(chatbot_win)
        entry_frame.place(x=10, y=440, width=380, height=50)
    
        # ...inside open_chatbot...
                # Fixed questions and replies
        questions = [
            "ููู ุฃุถูู ูุงุชูุฑุฉ ูุจูุนุงุชุ",
            "ููู ุฃุจุญุซ ุนู ุนูููุ",
            "ููู ุฃุนุฏู ุจูุงูุงุช ููุชุฌุ",
            "ููู ุฃุบูุฑ ุงููุบุฉุ",
            "ููู ุฃุถูู ููุธู ุฌุฏูุฏุ",
            "ููู ุฃุจุญุซ ุนู ูุงุชูุฑุฉ ูุจูุนุงุชุ",
            "ููู ุฃุนุฏู ูุงุชูุฑุฉ ูุจูุนุงุชุ",
            "ููู ุฃุถูู ูุงุชูุฑุฉ ูุดุชุฑูุงุชุ",
            "ููู ุฃุจุญุซ ุนู ููุฑุฏุ",
            "ููู ุฃุนุฏู ุจูุงูุงุช ููุฑุฏุ",
            "ููู ุฃุถูู ููุชุฌ ุฌุฏูุฏุ",
            "ููู ุฃุจุญุซ ุนู ููุชุฌุ",
            "ููู ุฃุนุฏู ุจูุงูุงุช ููุธูุ",
            "ููู ุฃุถูู ูุตุฑูู ุนุงูุ",
            "ููู ุฃุถูู ุฅูุฑุงุฏ ุนุงูุ",
            "ููู ุฃุจุญุซ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุชุ",
            "ููู ุฃุณุชุฎุฏู ุงูุชูุงุฑูุฑุ",
            "ููู ุฃุบูุฑ ูููุฉ ุงููุฑูุฑุ",
            "ููู ุฃุนูู ูุณุฎุฉ ุงุญุชูุงุทูุฉ ููุจูุงูุงุชุ",
            "ููู ุฃุณุชุฑุฌุน ูุณุฎุฉ ุงุญุชูุงุทูุฉุ",
            "ููู ุฃุถูู ูุฑุฏูุฉ ููููุฉุ",
            "ููู ุฃุถูู ุฃูุฑ ุฅูุชุงุฌุ",
            "ููู ุฃุจุญุซ ุนู ุณุฌู ููุธูุ",
            "ููู ุฃุจุญุซ ุนู ุณุฌู ููุฑุฏุ",
            "ููู ุฃุจุญุซ ุนู ุณุฌู ููุชุฌุ",
            "ููู ุฃุจุญุซ ุนู ุณุฌู ูุงุชูุฑุฉุ",
            "ูุณุงุนุฏุฉ"
        ]
        replies = {
            "ููู ุฃุถูู ูุงุชูุฑุฉ ูุจูุนุงุชุ": "ูู ุงููุงุฆูุฉ ุงูุฑุฆูุณูุฉุ ุงุฎุชุฑ 'ูุงุชูุฑุฉ ูุจูุนุงุช' ุซู ุงุถุบุท ุนูู 'ูุงุชูุฑุฉ ูุจูุนุงุช ุฌุฏูุฏุฉ'.",
            "ููู ุฃุจุญุซ ุนู ุนูููุ": "ุงุณุชุฎุฏู ูุฑุจุน ุงูุจุญุซ ูู ูุงูุฐุฉ ุงูุนููุงุก ุฃู ูุงุนุฏุฉ ุงูุจูุงูุงุช.",
            "ููู ุฃุนุฏู ุจูุงูุงุช ููุชุฌุ": "ุงุฐูุจ ุฅูู ูุงุนุฏุฉ ุงูุจูุงูุงุชุ ุงุฎุชุฑ 'ุงูููุชุฌุงุช' ุซู ุงุถุบุท ุนูู 'ุชุนุฏูู ุณุฌู'.",
            "ููู ุฃุบูุฑ ุงููุบุฉุ": "ุงุถุบุท ุนูู ุฒุฑ ุชุบููุฑ ุงููุบุฉ ูู ุงูุดุฑูุท ุงูุนููู.",
            "ููู ุฃุถูู ููุธู ุฌุฏูุฏุ": "ูู ูุงุนุฏุฉ ุงูุจูุงูุงุชุ ุงุฎุชุฑ 'ุงูููุธููู' ุซู ุงุถุบุท ุนูู 'ุฅุถุงูุฉ ุณุฌู'.",
            "ููู ุฃุจุญุซ ุนู ูุงุชูุฑุฉ ูุจูุนุงุชุ": "ูู ูุงูุฐุฉ ุงูููุงุชูุฑุ ุงุณุชุฎุฏู ูุฑุจุน ุงูุจุญุซ ุฃู ุงุฎุชุฑ ุฑูู ุงููุงุชูุฑุฉ ูู ุงููุงุฆูุฉ.",
            "ููู ุฃุนุฏู ูุงุชูุฑุฉ ูุจูุนุงุชุ": "ูู ูุงูุฐุฉ ุงูููุงุชูุฑุ ุงุฎุชุฑ ุงููุงุชูุฑุฉ ุซู ุงุถุบุท ุนูู 'ุชุนุฏูู'.",
            "ููู ุฃุถูู ูุงุชูุฑุฉ ูุดุชุฑูุงุชุ": "ูู ุงููุงุฆูุฉ ุงูุฑุฆูุณูุฉุ ุงุฎุชุฑ 'ูุงุชูุฑุฉ ูุดุชุฑูุงุช' ุซู ุงุถุบุท ุนูู 'ูุงุชูุฑุฉ ูุดุชุฑูุงุช ุฌุฏูุฏุฉ'.",
            "ููู ุฃุจุญุซ ุนู ููุฑุฏุ": "ุงุณุชุฎุฏู ูุฑุจุน ุงูุจุญุซ ูู ูุงูุฐุฉ ุงูููุฑุฏูู ุฃู ูุงุนุฏุฉ ุงูุจูุงูุงุช.",
            "ููู ุฃุนุฏู ุจูุงูุงุช ููุฑุฏุ": "ุงุฐูุจ ุฅูู ูุงุนุฏุฉ ุงูุจูุงูุงุชุ ุงุฎุชุฑ 'ุงูููุฑุฏูู' ุซู ุงุถุบุท ุนูู 'ุชุนุฏูู ุณุฌู'.",
            "ููู ุฃุถูู ููุชุฌ ุฌุฏูุฏุ": "ูู ูุงุนุฏุฉ ุงูุจูุงูุงุชุ ุงุฎุชุฑ 'ุงูููุชุฌุงุช' ุซู ุงุถุบุท ุนูู 'ุฅุถุงูุฉ ุณุฌู'.",
            "ููู ุฃุจุญุซ ุนู ููุชุฌุ": "ุงุณุชุฎุฏู ูุฑุจุน ุงูุจุญุซ ูู ูุงูุฐุฉ ุงูููุชุฌุงุช ุฃู ูุงุนุฏุฉ ุงูุจูุงูุงุช.",
            "ููู ุฃุนุฏู ุจูุงูุงุช ููุธูุ": "ุงุฐูุจ ุฅูู ูุงุนุฏุฉ ุงูุจูุงูุงุชุ ุงุฎุชุฑ 'ุงูููุธููู' ุซู ุงุถุบุท ุนูู 'ุชุนุฏูู ุณุฌู'.",
            "ููู ุฃุถูู ูุตุฑูู ุนุงูุ": "ูู ุงููุงุฆูุฉ ุงูุฑุฆูุณูุฉุ ุงุฎุชุฑ 'ุงูุฑุงุฏุงุช ู ูุตุฑููุงุช ุนุงูุฉ' ุซู ุงุถุบุท ุนูู 'ุชุณุฌูู ูุตุฑูู'.",
            "ููู ุฃุถูู ุฅูุฑุงุฏ ุนุงูุ": "ูู ุงููุงุฆูุฉ ุงูุฑุฆูุณูุฉุ ุงุฎุชุฑ 'ุงูุฑุงุฏุงุช ู ูุตุฑููุงุช ุนุงูุฉ' ุซู ุงุถุบุท ุนูู 'ุชุณุฌูู ุฅูุฑุงุฏ'.",
            "ููู ุฃุจุญุซ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุชุ": "ุงุณุชุฎุฏู ูุฑุจุน ุงูุจุญุซ ูู ูุงูุฐุฉ ูุงุนุฏุฉ ุงูุจูุงูุงุช ูุญุฏุฏ ุงูุฌุฏูู ุงููุทููุจ.",
            "ููู ุฃุณุชุฎุฏู ุงูุชูุงุฑูุฑุ": "ูู ุงููุงุฆูุฉ ุงูุฑุฆูุณูุฉุ ุงุฎุชุฑ 'ุงูุชูุงุฑูุฑ' ุซู ุญุฏุฏ ุงูุชูุฑูุฑ ุงููุทููุจ.",
            "ููู ุฃุบูุฑ ูููุฉ ุงููุฑูุฑุ": "ูู ูุงูุฐุฉ ุงููุณุชุฎุฏูููุ ุงุฎุชุฑ ุงุณูู ุซู ุงุถุบุท ุนูู 'ุชุบููุฑ ูููุฉ ุงููุฑูุฑ'.",
            "ููู ุฃุนูู ูุณุฎุฉ ุงุญุชูุงุทูุฉ ููุจูุงูุงุชุ": "ูู ุงูุฅุนุฏุงุฏุงุชุ ุงุฎุชุฑ 'ูุณุฎุฉ ุงุญุชูุงุทูุฉ' ูุงุชุจุน ุงูุชุนูููุงุช.",
            "ููู ุฃุณุชุฑุฌุน ูุณุฎุฉ ุงุญุชูุงุทูุฉุ": "ูู ุงูุฅุนุฏุงุฏุงุชุ ุงุฎุชุฑ 'ุงุณุชุฑุฌุงุน ูุณุฎุฉ ุงุญุชูุงุทูุฉ' ูุงุชุจุน ุงูุชุนูููุงุช.",
            "ููู ุฃุถูู ูุฑุฏูุฉ ููููุฉุ": "ูู ูุงุนุฏุฉ ุงูุจูุงูุงุชุ ุงุฎุชุฑ 'ุงููุฑุฏูุงุช ุงูููููุฉ' ุซู ุงุถุบุท ุนูู 'ุฅุถุงูุฉ ูุฑุฏูุฉ'.",
            "ููู ุฃุถูู ุฃูุฑ ุฅูุชุงุฌุ": "ูู ุงููุงุฆูุฉ ุงูุฑุฆูุณูุฉุ ุงุฎุชุฑ 'ุฃูุฑ ุฅูุชุงุฌ' ุซู ุฃุฏุฎู ุงูุจูุงูุงุช ุงููุทููุจุฉ.",
            "ููู ุฃุจุญุซ ุนู ุณุฌู ููุธูุ": "ุงุณุชุฎุฏู ูุฑุจุน ุงูุจุญุซ ูู ูุงูุฐุฉ ุงูููุธููู ุฃู ูุงุนุฏุฉ ุงูุจูุงูุงุช.",
            "ููู ุฃุจุญุซ ุนู ุณุฌู ููุฑุฏุ": "ุงุณุชุฎุฏู ูุฑุจุน ุงูุจุญุซ ูู ูุงูุฐุฉ ุงูููุฑุฏูู ุฃู ูุงุนุฏุฉ ุงูุจูุงูุงุช.",
            "ููู ุฃุจุญุซ ุนู ุณุฌู ููุชุฌุ": "ุงุณุชุฎุฏู ูุฑุจุน ุงูุจุญุซ ูู ูุงูุฐุฉ ุงูููุชุฌุงุช ุฃู ูุงุนุฏุฉ ุงูุจูุงูุงุช.",
            "ููู ุฃุจุญุซ ุนู ุณุฌู ูุงุชูุฑุฉุ": "ุงุณุชุฎุฏู ูุฑุจุน ุงูุจุญุซ ูู ูุงูุฐุฉ ุงูููุงุชูุฑ ุฃู ูุงุนุฏุฉ ุงูุจูุงูุงุช.",
            "ูุณุงุนุฏุฉ": "ุงุณุฃููู ุนู ุฅุถุงูุฉ ุฃู ุชุนุฏูู ุฃู ุจุญุซ ุฃู ุชูุงุฑูุฑ ุฃู ุฅุนุฏุงุฏุงุช ุฃู ุฃู ูุธููุฉ ุฃุฎุฑู ูู ุงูุชุทุจูู.",
        }
        # ...rest of open_chatbot...
    
        # Dropdown for questions
        selected_question = tk.StringVar()
        question_dropdown = ttk.Combobox(entry_frame, textvariable=selected_question, values=questions, font=("Arial", 14), state="readonly")
        question_dropdown.pack(fill="x", padx=8, pady=8)
    
        def on_select(event=None):
            q = selected_question.get()
            if not q:
                return
            chat_text.config(state="normal")
            chat_text.insert("end", f"ุฃูุช: {q}\n")
            reply = replies.get(q, "ุนุฐุฑุงูุ ูู ุฃููู ุณุคุงูู. ุฌุฑุจ ูููุฉ 'ูุณุงุนุฏุฉ'.")
            chat_text.insert("end", f"ุงููุณุงุนุฏ: {reply}\n\n")
            chat_text.config(state="disabled")
            chat_text.see("end")
    
        question_dropdown.bind("<<ComboboxSelected>>", on_select)
    
        # Optionally, show a welcome/help message
        chat_text.config(state="normal")
        chat_text.insert("end", "ูุฑุญุจุงู! ุงุฎุชุฑ ุณุคุงูุงู ูู ุงูุฃุณุฆูุฉ ุงูุดุงุฆุนุฉ ุจุงูุฃุณูู.\n\n")
        chat_text.config(state="disabled")
    def create_chatbot_button(self):
        import config
        """Create and animate the chatbot GIF button in the main menu"""
        chatbot_icon_path = os.path.join(BASE_DIR, "Static", "images", "chatbot.gif")
        
        # Initialize animation variables
        self.app.gif_frames = []
        self.app.current_gif_frame = 0  # Initialize frame counter
        
        try:
            with Image.open(chatbot_icon_path) as gif:
                # Get total frames (some GIFs report 0 for n_frames)
                total_frames = gif.n_frames if hasattr(gif, 'n_frames') else 0
                
                if total_frames > 0:
                    for frame in range(total_frames):
                        gif.seek(frame)
                        resized_frame = gif.copy().resize((60, 60), Image.LANCZOS)
                        self.app.gif_frames.append(ImageTk.PhotoImage(resized_frame))
                else:
                    # Handle single-frame GIFs or invalid frame counts
                    resized_frame = gif.copy().resize((60, 60), Image.LANCZOS)
                    self.app.gif_frames.append(ImageTk.PhotoImage(resized_frame))
                    
        except Exception as e:
            print(f"Error loading GIF: {e}")
            # Fallback to blank image
            blank_img = Image.new('RGBA', (60, 60), (0, 0, 0, 0))
            self.app.gif_frames = [ImageTk.PhotoImage(blank_img)]
        
        # Create the button
        self.app.chatbot_main_btn = tk.Label(
            self.root,
            image=self.app.gif_frames[0],
            bg=config.COLORS["card"],
            cursor="hand2"
        )
        # Initial placement (bottom-left, 1% from left, 95% from top)
        self.app.chatbot_main_btn.place(relx=0.01, rely=0.97, anchor='sw')

        def start_drag(event):
            widget = event.widget
            # Store initial cursor position (window-relative)
            widget._drag_start_x = event.x_root - widget.winfo_rootx()
            widget._drag_start_y = event.y_root - widget.winfo_rooty()

        def do_drag(event):
            widget = event.widget
            if hasattr(widget, '_drag_start_x'):
                # Calculate new position in window coordinates
                new_x = event.x_root - widget._drag_start_x
                new_y = event.y_root - widget._drag_start_y
                
                # Convert to relative (0.0-1.0) coordinates
                relx = new_x / widget.winfo_toplevel().winfo_width()
                rely = new_y / widget.winfo_toplevel().winfo_height()
                
                # Constrain to window bounds
                relx = max(0.0, min(relx, 0.99))  # 1% margin
                rely = max(0.0, min(rely, 0.99))
                
                # Update position
                widget.place(relx=relx, rely=rely, anchor='nw')  # Anchor NW for smooth dragging

        def on_drag_end(event):
            self.open_chatbot()  # Your original functionality

        # Bind events
        self.app.chatbot_main_btn.bind("<Button-1>", start_drag)
        self.app.chatbot_main_btn.bind("<B1-Motion>", do_drag)
        self.app.chatbot_main_btn.bind("<ButtonRelease-1>", on_drag_end)
        
        # Start animation if we have multiple frames
        if len(self.app.gif_frames) > 1:
            self.animate_gif()

    def animate_gif(self):
        """Handle GIF animation"""
        if not hasattr(self.app, 'chatbot_main_btn') or not self.app.chatbot_main_btn.winfo_exists():
            return  # Stop if button doesn't exist
        
        self.app.current_gif_frame = (self.app.current_gif_frame + 1) % len(self.app.gif_frames)
        self.app.chatbot_main_btn.config(image=self.app.gif_frames[self.app.current_gif_frame])
        self.root.after(100, self.animate_gif)  # Continue animation